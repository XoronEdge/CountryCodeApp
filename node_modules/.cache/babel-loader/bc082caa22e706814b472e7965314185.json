{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/i/ReactApp/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/i/ReactApp/frontend/src/pages/Country/Country.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Countries($offset: int, $limit: int) {\\n    countries(offset: $offset, limit: $limit) {\\n      name\\n      code\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nconst COUNTRIES_QUERY = gql(_templateObject());\n\nconst Country = ({\n  match\n}) => {\n  const _useQuery = useQuery(COUNTRIES_QUERY, {\n    variables: {\n      offset: 0,\n      limit: 10\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        fetchMore = _useQuery.fetchMore;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Error :(\");\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Hello From Country\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, data.countries.map(country => {\n    return React.createElement(\"li\", {\n      key: country.name + country.currency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"\".concat(match.path, \"/\").concat(country.code),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, country.name, \" \", country.code));\n  })));\n};\n\nexport default Country;","map":{"version":3,"sources":["/home/i/ReactApp/frontend/src/pages/Country/Country.js"],"names":["React","Link","useQuery","gql","COUNTRIES_QUERY","Country","match","variables","offset","limit","loading","error","data","fetchMore","countries","map","country","name","currency","path","code"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,MAAMC,eAAe,GAAGD,GAAH,mBAArB;;AAQA,MAAME,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA,oBACeJ,QAAQ,CAACE,eAAD,EAAkB;AACpEG,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,CADC;AAETC,MAAAA,KAAK,EAAE;AAFE;AADyD,GAAlB,CADvB;AAAA,QACrBC,OADqB,aACrBA,OADqB;AAAA,QACZC,KADY,aACZA,KADY;AAAA,QACLC,IADK,aACLA,IADK;AAAA,QACCC,SADD,aACCA,SADD;;AAO7B,MAAIH,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACX,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmBC,OAAO,IAAI;AAC7B,WACE;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACE,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,IAAD;AAAM,MAAA,EAAE,YAAKZ,KAAK,CAACa,IAAX,cAAmBH,OAAO,CAACI,IAA3B,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,OAAO,CAACC,IADX,OACkBD,OAAO,CAACI,IAD1B,CAFJ,CADF;AASD,GAVA,CADH,CAFF,CADF;AAkBD,CA3BD;;AA6BA,eAAef,OAAf","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nconst COUNTRIES_QUERY = gql`\n  query Countries($offset: int, $limit: int) {\n    countries(offset: $offset, limit: $limit) {\n      name\n      code\n    }\n  }\n`;\nconst Country = ({ match }) => {\n  const { loading, error, data, fetchMore } = useQuery(COUNTRIES_QUERY, {\n    variables: {\n      offset: 0,\n      limit: 10\n    }\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  return (\n    <>\n      <h1>Hello From Country</h1>\n      <ul>\n        {data.countries.map(country => {\n          return (\n            <li key={country.name + country.currency}>\n              {\n                <Link to={`${match.path}/${country.code}`}>\n                  {country.name} {country.code}\n                </Link>\n              }\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Country;\n"]},"metadata":{},"sourceType":"module"}